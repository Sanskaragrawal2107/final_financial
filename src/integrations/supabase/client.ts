// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { MaterialItem, BankDetails } from '@/lib/types';

const SUPABASE_URL = "https://bpyzpnioddmzniuikbsn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJweXpwbmlvZGRtem5pdWlrYnNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODE0MzksImV4cCI6MjA1NzM1NzQzOX0.UEdE77tebNbCdJkmX0RyNpKVp3mWhTL-hekMVNcPuIg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to calculate total paid invoices for a site
export const calculatePaidInvoicesTotalForSite = async (siteId: string): Promise<number> => {
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('net_amount')
      .eq('site_id', siteId)
      .eq('payment_status', 'paid')
      .eq('payment_by', 'supervisor');
      
    if (error) {
      console.error('Error fetching paid invoices:', error);
      throw error;
    }
    
    // Sum all net_amount values
    const total = data?.reduce((sum, invoice) => sum + (Number(invoice.net_amount) || 0), 0) || 0;
    return total;
  } catch (error) {
    console.error('Error calculating paid invoices total:', error);
    return 0;
  }
};

// Function to fetch site invoices
export const fetchSiteInvoices = async (siteId: string) => {
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('*')
      .eq('site_id', siteId)
      .order('date', { ascending: false });
      
    if (error) {
      console.error('Error fetching site invoices:', error);
      throw error;
    }
    
    // Transform the data to match the expected Invoice format
    return data.map(invoice => {
      // Parse material_items as MaterialItem[]
      let materialItems: MaterialItem[] = [];
      if (invoice.material_items) {
        try {
          // Handle case where it might be a string or already parsed JSON
          if (typeof invoice.material_items === 'string') {
            materialItems = JSON.parse(invoice.material_items);
          } else if (Array.isArray(invoice.material_items)) {
            materialItems = invoice.material_items as unknown as MaterialItem[];
          }
        } catch (e) {
          console.error('Error parsing material items:', e);
        }
      }

      // Parse bank_details as BankDetails
      let bankDetails: BankDetails = {
        bankName: '',
        accountNumber: '',
        ifscCode: ''
      };
      
      if (invoice.bank_details) {
        try {
          // Handle case where it might be a string or already parsed JSON
          if (typeof invoice.bank_details === 'string') {
            bankDetails = JSON.parse(invoice.bank_details);
          } else if (typeof invoice.bank_details === 'object') {
            bankDetails = invoice.bank_details as unknown as BankDetails;
          }
        } catch (e) {
          console.error('Error parsing bank details:', e);
        }
      }

      return {
        id: invoice.id,
        date: new Date(invoice.date),
        partyId: invoice.party_id,
        partyName: invoice.party_name,
        material: invoice.material,
        quantity: Number(invoice.quantity),
        rate: Number(invoice.rate),
        gstPercentage: Number(invoice.gst_percentage),
        grossAmount: Number(invoice.gross_amount),
        netAmount: Number(invoice.net_amount),
        materialItems,
        bankDetails,
        billUrl: invoice.bill_url,
        paymentStatus: invoice.payment_status,
        createdBy: invoice.created_by,
        createdAt: new Date(invoice.created_at),
        approverType: invoice.approver_type,
        siteId: invoice.site_id
      };
    });
  } catch (error) {
    console.error('Error processing site invoices:', error);
    return [];
  }
};

// Function to check if user has admin role
export const checkAdminRole = async (userId: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('role')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error('Error checking admin role:', error);
      return false;
    }
    
    return data?.role === 'admin';
  } catch (error) {
    console.error('Error checking admin role:', error);
    return false;
  }
};

// Function to check if user has supervisor or admin role
export const checkSupervisorOrAdminRole = async (userId: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('role')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error('Error checking role:', error);
      return false;
    }
    
    return data?.role === 'admin' || data?.role === 'supervisor';
  } catch (error) {
    console.error('Error checking role:', error);
    return false;
  }
};

// Function to delete a transaction with role check
export const deleteTransaction = async (transactionId: string, userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to delete transactions. Admin access required.');
  }
  
  const { error } = await supabase
    .from('expenses')
    .delete()
    .eq('id', transactionId);
    
  if (error) {
    console.error('Error deleting transaction:', error);
    throw error;
  }
};

// Function to update a transaction with role check
export const updateTransaction = async (transactionId: string, updates: Database['public']['Tables']['expenses']['Update'], userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to update transactions. Admin access required.');
  }
  
  const { error } = await supabase
    .from('expenses')
    .update(updates)
    .eq('id', transactionId);
    
  if (error) {
    console.error('Error updating transaction:', error);
    throw error;
  }
};
