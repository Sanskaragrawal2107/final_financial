
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { MaterialItem, BankDetails, PaymentStatus } from '@/lib/types';

const SUPABASE_URL = "https://bpyzpnioddmzniuikbsn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJweXpwbmlvZGRtem5pdWlrYnNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODE0MzksImV4cCI6MjA1NzM1NzQzOX0.UEdE77tebNbCdJkmX0RyNpKVp3mWhTL-hekMVNcPuIg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the supabase client - use any instead of explicit type to avoid excessive type instantiation
export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to calculate total paid invoices for a site
export const calculatePaidInvoicesTotalForSite = async (siteId: string): Promise<number> => {
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('net_amount')
      .eq('site_id', siteId)
      .eq('payment_status', 'paid')
      .eq('payment_by', 'supervisor');
      
    if (error) {
      console.error('Error fetching paid invoices:', error);
      throw error;
    }
    
    // Sum all net_amount values
    const total = data?.reduce((sum, invoice) => sum + (Number(invoice.net_amount) || 0), 0) || 0;
    return total;
  } catch (error) {
    console.error('Error calculating paid invoices total:', error);
    return 0;
  }
};

// Function to fetch site invoices
export const fetchSiteInvoices = async (siteId: string) => {
  try {
    console.log('Fetching invoices for site ID:', siteId);
    const { data, error } = await supabase
      .from('site_invoices')
      .select('*')
      .eq('site_id', siteId)
      .order('date', { ascending: false });
      
    if (error) {
      console.error('Error fetching site invoices:', error);
      throw error;
    }

    console.log('Raw invoice data from DB:', data);
    
    // Transform the data to match the expected Invoice format
    return data?.map(invoice => {
      try {
        // Parse material_items as MaterialItem[]
        let materialItems: MaterialItem[] = [];
        if (invoice.material_items) {
          try {
            if (typeof invoice.material_items === 'string') {
              materialItems = JSON.parse(invoice.material_items).map(item => ensureMaterialItemProperties(item));
            } else if (Array.isArray(invoice.material_items)) {
              materialItems = invoice.material_items.map(item => ensureMaterialItemProperties(item));
            } else if (typeof invoice.material_items === 'object') {
              materialItems = [ensureMaterialItemProperties(invoice.material_items)];
            }
          } catch (e) {
            console.error('Error parsing material items:', e, invoice.material_items);
          }
        }

        // Parse bank_details as BankDetails
        let bankDetails: BankDetails = {
          bankName: '',
          accountNumber: '',
          ifscCode: ''
        };
        
        if (invoice.bank_details) {
          try {
            if (typeof invoice.bank_details === 'string') {
              bankDetails = JSON.parse(invoice.bank_details);
            } else if (typeof invoice.bank_details === 'object' && invoice.bank_details !== null) {
              const bd = invoice.bank_details as any;
              bankDetails = {
                bankName: bd.bankName || '',
                accountNumber: bd.accountNumber || '',
                ifscCode: bd.ifscCode || '',
                email: bd.email,
                mobile: bd.mobile
              };
            }
          } catch (e) {
            console.error('Error parsing bank details:', e, invoice.bank_details);
          }
        }

        return {
          id: invoice.id,
          date: new Date(invoice.date),
          partyId: invoice.party_id,
          partyName: invoice.party_name,
          material: invoice.material,
          quantity: Number(invoice.quantity),
          rate: Number(invoice.rate),
          gstPercentage: Number(invoice.gst_percentage),
          grossAmount: Number(invoice.gross_amount),
          netAmount: Number(invoice.net_amount),
          materialItems,
          bankDetails,
          billUrl: invoice.bill_url,
          paymentStatus: invoice.payment_status as PaymentStatus,
          createdBy: invoice.created_by || '',
          createdAt: new Date(invoice.created_at),
          approverType: invoice.approver_type as "ho" | "supervisor",
          siteId: invoice.site_id,
          vendorName: invoice.party_name,  
          invoiceNumber: invoice.id.slice(0, 8),
          amount: Number(invoice.net_amount),
          status: invoice.payment_status as PaymentStatus
        };
      } catch (error) {
        console.error('Error processing invoice:', error, invoice);
        // Return a minimal valid invoice object if parsing fails
        return {
          id: invoice.id,
          date: new Date(invoice.date || new Date()),
          partyId: invoice.party_id || '',
          partyName: invoice.party_name || '',
          material: invoice.material || '',
          quantity: Number(invoice.quantity) || 0,
          rate: Number(invoice.rate) || 0,
          gstPercentage: Number(invoice.gst_percentage) || 0,
          grossAmount: Number(invoice.gross_amount) || 0,
          netAmount: Number(invoice.net_amount) || 0,
          materialItems: [],
          bankDetails: {
            bankName: '',
            accountNumber: '',
            ifscCode: ''
          },
          paymentStatus: invoice.payment_status || 'pending',
          createdBy: invoice.created_by || '',
          createdAt: new Date(invoice.created_at || new Date()),
          siteId: invoice.site_id || '',
          status: invoice.payment_status || 'pending'
        };
      }
    }) || [];
  } catch (error) {
    console.error('Error processing site invoices:', error);
    return [];
  }
};

// Helper function to ensure a JSON object has all MaterialItem properties
function ensureMaterialItemProperties(item: any): MaterialItem {
  return {
    id: item?.id || String(Date.now()),
    material: item?.material || '',
    quantity: typeof item?.quantity === 'number' ? item.quantity : null,
    rate: typeof item?.rate === 'number' ? item.rate : null,
    gstPercentage: typeof item?.gstPercentage === 'number' ? item.gstPercentage : null,
    amount: typeof item?.amount === 'number' ? item.amount : null
  };
}

// Function to check if user has admin role
export const checkAdminRole = async (userId: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('role')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error('Error checking admin role:', error);
      return false;
    }
    
    return data?.role === 'admin';
  } catch (error) {
    console.error('Error checking admin role:', error);
    return false;
  }
};

// Function to check if user has supervisor or admin role
export const checkSupervisorOrAdminRole = async (userId: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('role')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error('Error checking role:', error);
      return false;
    }
    
    return data?.role === 'admin' || data?.role === 'supervisor';
  } catch (error) {
    console.error('Error checking role:', error);
    return false;
  }
};

// Function to delete a transaction with role check
export const deleteTransaction = async (transactionId: string, userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to delete transactions. Admin access required.');
  }
  
  const { error } = await supabase
    .from('expenses')
    .delete()
    .eq('id', transactionId);
    
  if (error) {
    console.error('Error deleting transaction:', error);
    throw error;
  }
};

// Function to update a transaction with role check
export const updateTransaction = async (transactionId: string, updates: Database['public']['Tables']['expenses']['Update'], userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to update transactions. Admin access required.');
  }
  
  const { error } = await supabase
    .from('expenses')
    .update(updates)
    .eq('id', transactionId);
    
  if (error) {
    console.error('Error updating transaction:', error);
    throw error;
  }
};

// Function to delete an advance with role check
export const deleteAdvance = async (advanceId: string, userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to delete advances. Admin access required.');
  }
  
  const { error } = await supabase
    .from('advances')
    .delete()
    .eq('id', advanceId);
    
  if (error) {
    console.error('Error deleting advance:', error);
    throw error;
  }
};

// Function to update an advance with role check
export const updateAdvance = async (advanceId: string, updates: Database['public']['Tables']['advances']['Update'], userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to update advances. Admin access required.');
  }
  
  const { error } = await supabase
    .from('advances')
    .update(updates)
    .eq('id', advanceId);
    
  if (error) {
    console.error('Error updating advance:', error);
    throw error;
  }
};

// Function to delete funds received with role check
export const deleteFundsReceived = async (fundsId: string, userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to delete funds. Admin access required.');
  }
  
  const { error } = await supabase
    .from('funds_received')
    .delete()
    .eq('id', fundsId);
    
  if (error) {
    console.error('Error deleting funds received:', error);
    throw error;
  }
};

// Function to update funds received with role check
export const updateFundsReceived = async (fundsId: string, updates: Database['public']['Tables']['funds_received']['Update'], userId: string) => {
  const isAdmin = await checkAdminRole(userId);
  
  if (!isAdmin) {
    throw new Error('You do not have permission to update funds. Admin access required.');
  }
  
  const { error } = await supabase
    .from('funds_received')
    .update(updates)
    .eq('id', fundsId);
    
  if (error) {
    console.error('Error updating funds received:', error);
    throw error;
  }
};
