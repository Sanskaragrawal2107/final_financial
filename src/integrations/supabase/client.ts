
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { UserRole } from '@/lib/types';

const SUPABASE_URL = "https://ejwfqmacjzheawhxvhfw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVqd2ZxbWFjanpoZWF3aHh2aGZ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1ODc3MzIsImV4cCI6MjA1NzE2MzczMn0.7_cQFZGS6Zfhu0hJnzP96ZYLcKIm2jr1jEs4gH7Vgfs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to format date for Supabase queries
export const formatDateForSupabase = (date: Date): string => {
  return date.toISOString();
};

// Create predefined admin and supervisor users
export const createPredefinedUsers = async (): Promise<{
  adminEmail: string;
  adminPassword: string;
  supervisorEmail: string;
  supervisorPassword: string;
} | null> => {
  const adminEmail = "finance.admin@example.com";
  const adminPassword = "Admin@12345";
  const supervisorEmail = "site.supervisor@example.com";
  const supervisorPassword = "Super@12345";
  
  try {
    // Create admin user if it doesn't exist
    const { data: adminExistsData } = await supabase.auth.signInWithPassword({
      email: adminEmail,
      password: adminPassword
    });
    
    if (!adminExistsData.user) {
      // Admin doesn't exist, create it
      const { data: adminData, error: adminError } = await supabase.auth.signUp({
        email: adminEmail,
        password: adminPassword,
        options: {
          data: {
            full_name: "Finance Admin",
            role: UserRole.ADMIN
          }
        }
      });
      
      if (adminError) {
        console.error("Failed to create admin user:", adminError);
      } else {
        console.log("Admin user created successfully");
        
        // Also create a supervisors entry for demo
        const { error: supervisorAdminError } = await supabase
          .from('supervisors')
          .insert({
            name: "Finance Admin",
            email: adminEmail
          });
        
        if (supervisorAdminError) {
          console.error("Failed to create admin supervisor entry:", supervisorAdminError);
        }
      }
    }
    
    // Create supervisor user if it doesn't exist
    const { data: supervisorExistsData } = await supabase.auth.signInWithPassword({
      email: supervisorEmail,
      password: supervisorPassword
    });
    
    if (!supervisorExistsData.user) {
      // Supervisor doesn't exist, create it
      const { data: supervisorData, error: supervisorError } = await supabase.auth.signUp({
        email: supervisorEmail,
        password: supervisorPassword,
        options: {
          data: {
            full_name: "Site Supervisor",
            role: UserRole.SUPERVISOR
          }
        }
      });
      
      if (supervisorError) {
        console.error("Failed to create supervisor user:", supervisorError);
      } else {
        console.log("Supervisor user created successfully");
        
        // Create a supervisors entry
        const { data: supervisorEntryData, error: supervisorEntryError } = await supabase
          .from('supervisors')
          .insert({
            name: "Site Supervisor",
            email: supervisorEmail,
            user_id: supervisorData.user?.id
          });
        
        if (supervisorEntryError) {
          console.error("Failed to create supervisor entry:", supervisorEntryError);
        }
      }
    }
    
    return {
      adminEmail,
      adminPassword,
      supervisorEmail,
      supervisorPassword
    };
  } catch (error) {
    console.error("Error creating predefined users:", error);
    return null;
  }
};
