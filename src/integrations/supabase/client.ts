
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bpyzpnioddmzniuikbsn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJweXpwbmlvZGRtem5pdWlrYnNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODE0MzksImV4cCI6MjA1NzM1NzQzOX0.UEdE77tebNbCdJkmX0RyNpKVp3mWhTL-hekMVNcPuIg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function for incrementing values - updated with proper types
if (!supabase.rpc) {
  // This is a simplified version as the actual implementation would depend on Supabase's SDK
  // We are using this as a fallback only, and it should be removed once proper RPC is available
  supabase.rpc = async (fn: string, params: any) => {
    try {
      return await supabase.from(params.row_id).update({
        [params.column_name]: params.x
      });
    } catch (error) {
      console.error("RPC error:", error);
      throw error;
    }
  };
}
