
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { MaterialItem } from '@/lib/types';

const SUPABASE_URL = "https://bpyzpnioddmzniuikbsn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJweXpwbmlvZGRtem5pdWlrYnNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODE0MzksImV4cCI6MjA1NzM1NzQzOX0.UEdE77tebNbCdJkmX0RyNpKVp3mWhTL-hekMVNcPuIg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to calculate total paid invoices for a site
export const calculatePaidInvoicesTotalForSite = async (siteId: string): Promise<number> => {
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('net_amount')
      .eq('site_id', siteId)
      .eq('payment_status', 'paid');
      
    if (error) {
      console.error('Error fetching paid invoices:', error);
      throw error;
    }
    
    // Sum all net_amount values
    const total = data?.reduce((sum, invoice) => sum + (Number(invoice.net_amount) || 0), 0) || 0;
    return total;
  } catch (error) {
    console.error('Error calculating paid invoices total:', error);
    return 0;
  }
};

// Function to fetch site invoices
export const fetchSiteInvoices = async (siteId: string) => {
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('*')
      .eq('site_id', siteId)
      .order('date', { ascending: false });
      
    if (error) {
      console.error('Error fetching site invoices:', error);
      throw error;
    }
    
    // Transform the data to match the expected Invoice format
    return data.map(invoice => ({
      id: invoice.id,
      date: new Date(invoice.date),
      partyId: invoice.party_id,
      partyName: invoice.party_name,
      material: invoice.material,
      quantity: Number(invoice.quantity),
      rate: Number(invoice.rate),
      gstPercentage: Number(invoice.gst_percentage),
      grossAmount: Number(invoice.gross_amount),
      netAmount: Number(invoice.net_amount),
      materialItems: invoice.material_items as MaterialItem[] || [],
      bankDetails: invoice.bank_details,
      billUrl: invoice.bill_url,
      paymentStatus: invoice.payment_status,
      createdBy: invoice.created_by,
      createdAt: new Date(invoice.created_at),
      approverType: invoice.approver_type,
      siteId: invoice.site_id
    }));
  } catch (error) {
    console.error('Error processing site invoices:', error);
    return [];
  }
};
