
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bpyzpnioddmzniuikbsn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJweXpwbmlvZGRtem5pdWlrYnNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODE0MzksImV4cCI6MjA1NzM1NzQzOX0.UEdE77tebNbCdJkmX0RyNpKVp3mWhTL-hekMVNcPuIg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to calculate the total amount of paid invoices for a site
export const calculatePaidInvoicesTotalForSite = async (siteId: string): Promise<number> => {
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('net_amount')
      .eq('site_id', siteId)
      .eq('payment_status', 'paid');
    
    if (error) {
      console.error('Error fetching paid invoices:', error);
      return 0;
    }
    
    if (!data || data.length === 0) {
      return 0;
    }
    
    return data.reduce((total, invoice) => total + Number(invoice.net_amount), 0);
  } catch (error) {
    console.error('Error in calculatePaidInvoicesTotalForSite:', error);
    return 0;
  }
};

// Function to fetch site invoices
export const fetchSiteInvoices = async (siteId: string) => {
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('*')
      .eq('site_id', siteId);
    
    if (error) {
      throw error;
    }
    
    return data || [];
  } catch (error) {
    console.error('Error fetching site invoices:', error);
    throw error;
  }
};
