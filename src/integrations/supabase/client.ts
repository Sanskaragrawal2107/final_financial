
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { UserRole } from '@/lib/types';

const SUPABASE_URL = "https://kpfrojdpkfjyazgcznko.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtwZnJvamRwa2ZqeWF6Z2N6bmtvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1OTQxNjUsImV4cCI6MjA1NzE3MDE2NX0.2CjS2cNtR0Z-WJhBeSSUqEk4xtHNJizDyNeZ6XTYi08";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Formats a JavaScript Date object to a format compatible with Supabase date columns
 * @param date The date to format
 * @returns Formatted date string (YYYY-MM-DD)
 */
export const formatDateForSupabase = (date: Date): string => {
  return date.toISOString().split('T')[0];
};

/**
 * Ensures a user exists in the system - creates a user if not present
 * @param email User's email
 * @param password User's password
 * @param userData Additional user data (e.g., name, role)
 * @returns Promise with user data or error
 */
export const ensureUserExists = async (
  email: string, 
  password: string, 
  userData: { full_name: string; role: UserRole }
): Promise<any> => {
  try {
    // First, check if user exists already
    const { data: existingUser, error: checkError } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    if (existingUser?.user) {
      console.log(`User ${email} already exists`);
      return existingUser;
    }

    // If user doesn't exist or there was an auth error, create new user
    const { data: newUser, error: signupError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: userData.full_name,
          role: userData.role
        }
      }
    });

    if (signupError) throw signupError;

    // If user was created, create a profile entry
    if (newUser?.user) {
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: newUser.user.id,
          full_name: userData.full_name,
          role: userData.role
        });

      if (profileError) {
        console.error('Error creating profile:', profileError);
      }
    }

    return newUser;
  } catch (error) {
    console.error('Error ensuring user exists:', error);
    throw error;
  }
};
